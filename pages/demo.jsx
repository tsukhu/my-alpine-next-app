import dynamic from 'next/dynamic';
import Head from 'next/head'
import Link from 'next/link'
import React from 'react';
export default function Demo() {
  const [refresh, setRefresh] = React.useState(false);
  const [MyComponent, setMyComponent] = React.useState(null);
  const [contentHTML, setContentHTML] = React.useState(`<div x-data="{ open: false }" class="m-2 p-2" >
    <button @click="open = !open" class="btn-red">Expand</button>
    
    <span x-show="open" class="text-gray-700 text-lg mx-2">
      Content...
    </span>
    </div>`)
  const [content, setContent] = React.useState(`<div class="bg-teal-100 h-screen flex flex-col justify-center items-center">
  
    <div 
      class="max-w-4xl mx-auto relative"
      x-data="{ activeSlide: 1, slides: [1, 2, 3, 4, 5] }"
     >
      <!-- Slides -->
      <template x-for="slide in slides" :key="slide">
        <div
           x-show="activeSlide === slide"
           class="p-24 font-bold text-5xl h-64 flex items-center bg-teal-500 text-white rounded-lg">
          <span class="w-12 text-center" x-text="slide"></span>
          <span class="text-teal-300">/</span>
          <span class="w-12 text-center" x-text="slides.length"></span>
        </div>
      </template>
      
      <!-- Prev/Next Arrows -->
      <div class="absolute inset-0 flex">
        <div class="flex items-center justify-start w-1/2">
          <button 
            class="bg-teal-100 text-teal-500 hover:text-orange-500 font-bold hover:shadow-lg rounded-full w-12 h-12 -ml-6"
            x-on:click="activeSlide = activeSlide === 1 ? slides.length : activeSlide - 1">
            &#8592;
           </button>
        </div>
        <div class="flex items-center justify-end w-1/2">
          <button 
            class="bg-teal-100 text-teal-500 hover:text-orange-500 font-bold hover:shadow rounded-full w-12 h-12 -mr-6"
            x-on:click="activeSlide = activeSlide === slides.length ? 1 : activeSlide + 1">
            &#8594;
          </button>
        </div>        
      </div>
  
      <!-- Buttons -->
      <div class="absolute w-full flex items-center justify-center px-4">
        <template x-for="slide in slides" :key="slide">
          <button
            class="flex-1 w-4 h-2 mt-4 mx-2 mb-0 rounded-full overflow-hidden transition-colors duration-200 ease-out hover:bg-teal-600 hover:shadow-lg"
            :class="{ 
                'bg-orange-600': activeSlide === slide,
                'bg-teal-300': activeSlide !== slide 
            }" 
            x-on:click="activeSlide = slide"
          ></button>
        </template>
      </div>
    </div>
    
    </div>
  </div>`)
  React.useEffect(() => {
    const loadComponent = async () => {
      return await dynamic(() => import('../components/SanitizedComponent'), { ssr: false });
    }
    loadComponent().then((component) => setMyComponent(component))
  }, [])

  React.useEffect(() => {
    if (refresh) {
      setContentHTML(content);
      setRefresh(false);
    }
  }, [refresh])


  return (
    <div className="font-sans flex flex-col h-screen w-full items-center align-middle">
      <Head>
        <title>Demo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <script src="//unpkg.com/alpinejs" defer></script>
        <script src="https://cdn.tailwindcss.com"></script>
      </Head>

      <main className='m-2 p-2 flex flex-col w-full'>
        <h1 className="text-gray-700 font-bold text-4xl text-center m-2">
          <Link href="/" className='hover:underline text-blue-700'>Home</Link>
        </h1>
        <div className='flex flex-col w-full space-y-2'>
          {MyComponent && (
            <div className="flex justify-center">
              <div className="m-2 p-2 w-1/2">
                <MyComponent contentHTML={contentHTML} />
              </div>
              <div className="m-2 p-2 w-1/2 flex flex-col">
                <div>
                  <label htmlFor="exampleFormControlTextarea1" className="form-label inline-block mb-2 text-gray-700"
                  >Example Alpine Code
                  </label>
                  <textarea
                    className="
        form-control
        block
        w-full
        px-3
        py-1.5
        text-xs
        font-normal
        text-gray-700
        bg-white bg-clip-padding
        border border-solid border-gray-300
        rounded
        transition
        ease-in-out
        m-0
        focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none
      "
                    id="exampleFormControlTextarea1"
                    rows="3"
                    placeholder="Your message"
                    value={contentHTML}
                    onChange={(e) => setContentHTML(e.target.value)}
                    rows={40}
                  ></textarea>
                </div>
            
              <div className="flex space-x-2 justify-center m-2">
                <button type="button" className="inline-block px-6 py-2.5 bg-blue-600 text-white font-medium text-xs leading-tight uppercase rounded shadow-md hover:bg-blue-700 hover:shadow-lg focus:bg-blue-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-blue-800 active:shadow-lg transition duration-150 ease-in-out"
                  onClick={() => { setRefresh(true) }}
                >Update</button>
              </div>
              </div>
            </div>
          )}


        </div>
      </main>


    </div>
  )
}